{"version":3,"sources":["scrollTest/scrollApp.js","weatherAppProject/card.js","weatherAppProject/renderPage.js","weatherAppProject/renderLoading.js","weatherAppProject/App.js","router.js","index.js"],"names":["BoxComponents","animate","className","data-aos","data-aos-offset","data-aos-duration","ScrollApp","darkMode","useEffect","AOS","init","style","backgroundColor","map","animation","RenderCard","cityName","cityImg","weather","src","alt","localTime","main","temp","RenderPage","cardList","city","weatherIcon","state","time","card","index","RenderLoading","id","App","cityList","isLoading","mainInfo","getLocalTime","timeZone","d","Date","localHours","getHours","localMinute","getMinutes","getWeather","a","axios","get","json","weatherInfo","data","Math","floor","timezone","getCityImg","formatedCity","replace","then","response","hits","webformatURL","getMainWeather","coords","latitude","longitude","name","icon","transTimeState","setState","split","hour","Number","minute","String","handleGeoSuccess","position","handleGeoFailure","console","log","setInfo","cards","navigator","geolocation","getCurrentPosition","i","length","cityInfo","push","this","React","Component","Navigation","setDarkMode","to","onClick","AppRouter","useState","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02cb6b1d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport AOS from 'aos';\nimport 'aos/dist/aos.css';\nimport 'scrollTest/scrollApp.css';\n\nconst BoxComponents = ({ animate = 'fade' }) => {\n  return (\n    <div\n      className=\"box-wrapper aos-init\"\n      data-aos={animate}\n      data-aos-offset=\"150\"\n      data-aos-duration=\"600\"\n    >\n      <span className=\"boxName\">{animate}</span>\n      <div>--100px</div>\n      <div>--200px</div>\n      <div>--300px</div>\n      <div>--400px</div>\n      <span className=\"lastPx\">--500px</span>\n    </div>\n  );\n};\n\nconst ScrollApp = ({ darkMode }) => {\n  useEffect(() => {\n    AOS.init();\n  }, []);\n  const animationList = [\n    'fade',\n    'fade-up',\n    'fade-down',\n    'fade-left',\n    'fade-right',\n    'fade-up-right',\n    'fade-up-left',\n    'fade-down-right',\n    'fade-down-left',\n    'flip-up',\n    'flip-down',\n    'flip-left',\n    'flip-right',\n    'slide-up',\n    'slide-down',\n    'slide-left',\n    'slide-right',\n    'zoom-in',\n    'zoom-in-up',\n    'zoom-in-down',\n    'zoom-in-left',\n    'zoom-in-right',\n    'zoom-out',\n    'zoom-out-up',\n    'zoom-out-down',\n    'zoom-out-left',\n    'zoom-out-right',\n  ];\n  return (\n    <div\n      className=\"scrollApp-container\"\n      style={{ backgroundColor: darkMode ? '#000' : '#fff' }}\n    >\n      <div className=\"scrollApp-wrapper\">\n        {animationList.map((animation) => (\n          <BoxComponents animate={animation} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollApp;\n","import React from 'react';\r\n\r\nfunction RenderCard({ cityName, cityImg, weather }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <img className=\"card__bg\" src={cityImg} alt={cityName} />\r\n      <span className=\"card__info card__name\">{cityName}</span>\r\n      <span className=\"card__info card__time\">{weather.localTime}</span>\r\n      <span className=\"card__info card__state\">{weather.main}</span>\r\n      <span className=\"card__info card__temp\">{weather.temp}°C</span>\r\n    </div>\r\n  );\r\n}\r\nexport default RenderCard;\r\n","import React from 'react';\nimport RenderCard from 'weatherAppProject/card';\n\nfunction RenderPage({ cardList, main }) {\n  return (\n    <div className=\"container\">\n      <div className=\"main_wrapper\">\n        <div className=\"top_space\"></div>\n        <div className=\"main_title\">\n          <span className=\"main_title__country\">south korea</span>\n          <span className=\"main_title__city\">{main.city}</span>\n        </div>\n        <div className=\"main_icon\">\n          <img\n            className=\"main_weatherIcon\"\n            src={main.weatherIcon}\n            alt=\"weatherImageIcon\"\n          />\n        </div>\n        <div className=\"main_description\">\n          <span className=\"main_description__temp\">{main.temp}°C</span>\n          <span className=\"main_description__state\">{main.state}</span>\n        </div>\n      </div>\n      <div className=\"side_wrapper\">\n        <div className=\"clock_wrapper\">\n          <span className=\"clock\">{main.time}</span>\n        </div>\n        <div className=\"card_wrapper\">\n          {cardList.map((card) => (\n            <RenderCard\n              key={card.index}\n              cityName={card.cityName}\n              cityImg={card.cityImg}\n              weather={card.weather}\n            />\n          ))}\n        </div>\n      </div>\n      <img\n        className=\"main__bg\"\n        src=\"https://cdn.hipwallpaper.com/i/13/69/8TvaC0.jpg\"\n        alt=\"bg_image\"\n      />\n    </div>\n  );\n}\n\nexport default RenderPage;\n","import React from 'react';\n\nfunction RenderLoading() {\n  return (\n    <div className=\"renderLoading-container\">\n      <div id=\"load\">\n        <div>G</div>\n        <div>N</div>\n        <div>I</div>\n        <div>D</div>\n        <div>A</div>\n        <div>O</div>\n        <div>L</div>\n      </div>\n    </div>\n  );\n}\n\nexport default RenderLoading;\n","import React from 'react';\nimport axios from 'axios';\nimport RenderPage from 'weatherAppProject/renderPage';\nimport RenderLoading from 'weatherAppProject/renderLoading';\nimport 'weatherAppProject/App.css';\n\n//cityList : [\"busan\", \"Hanoi\",\"New York\", \"London\", \"paris\", \"Sydney\", \"Rome\", \"Osaka\", \"Budapest\", \"Berlin\", \"Havana\", \"Hong Kong\"],\n\nclass App extends React.Component {\n  state = {\n    cityList: ['New York', 'Paris', 'Sydney', 'Rome', 'Budapest', 'Berlin'],\n    isLoading: true,\n    cardList: [],\n    mainInfo: {},\n  };\n\n  getLocalTime = (timeZone) => {\n    let d = new Date();\n    let localHours = d.getHours() - 9 + timeZone;\n    if (localHours < 0) {\n      localHours += 24;\n    }\n    let localMinute = d.getMinutes();\n    return `${localHours}:${localMinute}`;\n  };\n\n  getWeather = async (cityName) => {\n    const API_KEY = '27338683655f3e15f8a75651633c9a1d';\n    const WEATHER_API = 'https://api.openweathermap.org/data/2.5/weather?';\n    const json = await axios.get(\n      `${WEATHER_API}q=${cityName}&appid=${API_KEY}&units=metric`\n    );\n    const weatherInfo = json.data.weather[0];\n    weatherInfo.temp = Math.floor(json.data.main.temp);\n    weatherInfo.localTime = this.getLocalTime(json.data.timezone / 3600);\n    return weatherInfo;\n  };\n\n  getCityImg = async (cityName) => {\n    const API_KEY = '22034991-dca9a94768b57d643bdde920b';\n    const formatedCity = cityName.replace(' ', '+');\n    const cityImg = await axios\n      .get(\n        `https://pixabay.com/api/?key=${API_KEY}&q=${formatedCity}\n    &image_type=photo\n    &orientation=horizontal\n    &min_width=300\n    &min_height=300\n    &per_page=3\n    &category= places\n    &colors=\"black\"\n    &pretty=true`\n      )\n      .then((response) => {\n        return response.data.hits[0].webformatURL;\n      });\n    return cityImg;\n  };\n\n  getMainWeather = async (coords) => {\n    const API_KEY = '27338683655f3e15f8a75651633c9a1d';\n    const WEATHER_API = 'https://api.openweathermap.org/data/2.5/weather?';\n    const { data } = await axios.get(\n      `${WEATHER_API}lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}&units=metric`\n    );\n    const weatherInfo = data.weather[0];\n    let main = {};\n    main.city = data.name;\n    main.temp = data.main.temp;\n    main.state = weatherInfo.main;\n    main.weatherIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@4x.png`;\n    main.time = this.transTimeState(this.getLocalTime(data.timezone / 3600));\n    this.setState({ mainInfo: main });\n  };\n\n  getLocalTime = (timeZone) => {\n    let d = new Date();\n    let localHours = d.getHours() - 9 + timeZone;\n    if (localHours < 0) {\n      localHours += 24;\n    }\n    let localMinute = d.getMinutes();\n    return `${localHours}:${localMinute}`;\n  };\n\n  transTimeState = (time) => {\n    const split = time.split(':');\n    let hour = Number(split[0]);\n    let minute = Number(split[1]);\n    if (minute < 10) {\n      minute = `0${String(minute)}`;\n    } else {\n      minute = String(minute);\n    }\n    if (hour > 12) {\n      if (hour >= 22) {\n        return `${hour - 12}:` + minute + ' PM';\n      } else {\n        return `0${hour - 12}:` + minute + ' PM';\n      }\n    } else if (hour === 12) {\n      return time + ' PM';\n    } else {\n      return time + ' AM';\n    }\n  };\n\n  handleGeoSuccess = (position) => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    const coords = {\n      latitude: latitude,\n      longitude: longitude,\n    };\n    this.getMainWeather(coords);\n  };\n\n  handleGeoFailure = () => {\n    console.log('no location');\n  };\n\n  setInfo = async () => {\n    const { cityList } = this.state;\n    let cards = [];\n    navigator.geolocation.getCurrentPosition(\n      this.handleGeoSuccess,\n      this.handleGeoFailure\n    );\n    for (let i = 0; i < cityList.length; i++) {\n      const cityName = cityList[i];\n      const cityInfo = { cityName: cityName, index: i };\n      cityInfo.weather = await this.getWeather(cityName);\n      cityInfo.cityImg = await this.getCityImg(cityName);\n      cards.push(cityInfo);\n    }\n    this.setState({ cardList: cards, isLoading: false });\n  };\n\n  componentDidMount() {\n    this.setInfo(); //완전 중요!!!\n    //원래 this.setInfo안에 있는 코드가 여기 componentMount() 함수 안에 있었다.\n    //그런데 왜인지 모르게 this.getWeather함수와 this.getCityImg함수에서 맞게 string 타입과 obj타입을 return해도\n    //계속 promise 객체로 받았고 이 promise 객체 안에 있는 값을 못가져왔다.(내가 못하는거일수도)\n    //혹시나 해서 따로 함수로 뺀 다음 async()와 await를 넣어주었더니 정상적으로 값을 가져왔다.\n    //뭥미...\n  }\n\n  render() {\n    const { isLoading, cardList, mainInfo } = this.state;\n    return (\n      <section className=\"contents\">\n        {isLoading ? (\n          <RenderLoading />\n        ) : (\n          <RenderPage cardList={cardList} main={mainInfo} />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { HashRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport ScrollApp from 'scrollTest/scrollApp';\nimport App from 'weatherAppProject/App';\n\nconst Navigation = ({ darkMode, setDarkMode }) => {\n  return (\n    <div\n      className=\"navigation-container\"\n      style={{ backgroundColor: darkMode ? '#000' : '#fff' }}\n    >\n      <div className=\"navigation-wrapper\">\n        <Link to=\"/weatherApp\">WeatherApp</Link>\n        <Link to=\"/scrollApp\">ScrollApp</Link>\n      </div>\n      <div className=\"set-darkMode\">\n        <div onClick={() => setDarkMode(false)}>Light Mode</div>\n        <div onClick={() => setDarkMode(true)}>Dark Mode</div>\n      </div>\n    </div>\n  );\n};\n\nconst AppRouter = () => {\n  const [darkMode, setDarkMode] = useState(false);\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Navigation darkMode={darkMode} setDarkMode={setDarkMode} />\n        </Route>\n        <Route exact path=\"/weatherApp\" component={App} /> {/* weatherApp */}\n        <Route exact path=\"/scrollApp\">\n          <ScrollApp darkMode={darkMode} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport AppRouter from 'router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}